\Sexpr{set_parent('paper.Rnw')}
\section{Application: Compare with model-specific measures}
\label{sec:app1}


In this section we demonstrate with various simulations that our proposed measures can be more useful to describe model complexity than model-specific measures that are based on the structure of the model.


\subsection{Linear relationships in a tree}
<<tree-increase-data>>=
set.seed(42)
library(rpart)
n = 1000
dat = data.frame(x = runif(n), x2 = rnorm(n))
nsd = 0.4
dat$y = 2 * dat$x + rnorm(n, sd = nsd)

grid.size = 100
epsilon = 0.05
@
Decision trees need to grow very deep to approximate linear relationship.
When a tree approximates a linear relationship, arguably the model structure might be complex, but the actual prediction function might be approximately linear.
We demonstrate how the two both the number of nodes and complexity measure C increase with increasing model accuracy, but at some point the complexity C decreases again.
We argue that the measure of complexity is better, since it describes the complexity on the level of the output.
In the following example, \Sexpr{n} data points are drawn from  a uniform distribution between 0 and 1, and the target is simulated as $2 * x + \epsilon$, where $\epsilon \sim N(0,\Sexpr{nsd})$.

<<tree-increase, fig.cap="Increasing the tree depth always increases number of terminal nodes, but the complexity measure increases at some point because the prediction function can be approximated by a single linear function.", results="asis">>=
rp_width = function(rp) sum(rp$frame$var == "<leaf>")

rp1 = rpart(y ~ ., data = dat, control = rpart.control(maxdepth = 1))
pred1 = Predictor$new(rp1, data = dat)
fc1 = FunComplexity$new(pred1, grid.size = grid.size, epsilon = epsilon)
#p1 = fc1$approx_models$x$plot() +
#  ggtitle(sprintf("Leaf nodes: %i, C: %i", rp_width(rp1), fc1$c_wmean))

rp2 = rpart(y ~ ., data = dat, control = rpart.control(maxdepth = 2))
pred2 = Predictor$new(rp2, data = dat)
fc2 = FunComplexity$new(pred2, grid.size = grid.size, epsilon = epsilon)
#p2 = fc2$approx_models$x$plot() +
#  ggtitle(sprintf("Leaf nodes: %i, C: %i", rp_width(rp2), fc2$c_wmean))

rp3 = rpart(y ~ ., data = dat, control = rpart.control(maxdepth = 3))
pred3 = Predictor$new(rp3, data = dat)
fc3 = FunComplexity$new(pred3, grid.size = grid.size, epsilon = epsilon)
#p3 = fc3$approx_models$x$plot() +
#  ggtitle(sprintf("Leaf nodes: %i, C: %i", rp_width(rp3), fc3$c_wmean))

#grid.arrange(p1, p2, p3, nrow = 1)
n_terminal = function(tree) {
  nrow(tree$frame[tree$frame$var == "<leaf>",])
}

tab = data.frame(
  "Tree Depth" = c(1,2,3),
  "Terminal nodes" = c(n_terminal(rp1), n_terminal(rp2),n_terminal(rp3)),
  "ALE" = c(spark(fc1$approx_models$x),spark(fc2$approx_models$x),spark(fc3$approx_models$x)),
  "Approximation" = c(
    spark(fc1$approx_models$x, approx = TRUE),
    spark(fc2$approx_models$x, approx = TRUE),
    spark(fc3$approx_models$x, approx = TRUE)),
  "AMEC" = c(fc1$c_wmean, fc2$c_wmean, fc3$c_wmean))
print.xtable(xtable(tab), sanitize.text.function = as.is, booktabs = TRUE)
@









